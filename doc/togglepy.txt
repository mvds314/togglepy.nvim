===============================================================================
togglepy.nvim - A plugin for toggling Python debugging and REPLs
===============================================================================

1. Introduction                                     *togglepy-intro*
   togglepy.nvim is a Neovim plugin that provide REPL based workflows often
   also used in scientitic programming development environments, e.g., MATLAB, R, etc.

   It allows you to:
   * Open an ipython REPL within Neovim (based on toggleterm.nvim) and easily switch to it.
   * Send lines or visual selections to the REPL.
   * Debug Python code with ipdb/pdb in the REPL and keep track of the debugging session in Neovim
     (using nvim-dap.nvim, nvim-dap-ui.nvim, and the ipdab python package).
   * Switch between virtual environments (using telescope.nvim).

2. Why?
   Python is ideal if you want to to scientific programming with well structured code.
   It is intepreted interpreted like MATLAB and R. But, at the same time, it's more than
   just another scripting language, because its advanced programming features features 
   (functions, classes, modules, unittesting,..) are not just add-ons, but are core parts
   of the language.

   Problems start when you start to apply programming workflows of compiled languages like C/C++/Java,
   to scientific programming with Python. Say you create a function or method that plots some data,
   and you don't like the way it looks. What you want to do is debug with an interactive REPL
   inside the function where you make the plot, change some code, send it to the REPL, until it looks
   the way you want.

   The way out is to make the REPL an integral part of your development workflow. This is what togglepy.nvim
   is all about.

3. Setup                                            *togglepy-setup*
    Prerequisites:
      * Python with ipython, and ipdab installed.
      * The Neovim with the following plugins:
        - nvim-telescope/telescope.nvim
        - nvim-lua/plenary.nvim
        - nvim-treesitter/nvim-treesitter
        - akinsho/toggleterm.nvim
        - mfussenegger/nvim-dap
        - rcarriga/nvim-dap-ui
    
    Set up with Lazy.nvim as follows
    require("lazy").setup({
          'user/togglepy.nvim',
          requires = {
              'nvim-telescope/telescope.nvim',
              'nvim-lua/plenary.nvim',
              'nvim-treesitter/nvim-treesitter',
              'akinsho/toggleterm.nvim',
              'mfussenegger/nvim-dap',
              'rcarriga/nvim-dap-ui',
          },
          config = function()
              require('togglepy').setup({ <key>=<value> })
          end,
      })

    For best integration, set up the <C-\> keymapping to toggle the terminal in toggleterm.
    The following is an example configuration a decent toggleterm.nvim configuration:
    require("lazy").setup({
      "akinsho/toggleterm.nvim",
      lazy = true,
      opts = {
        size = 99,
        open_mapping = [[<c-\>]],
        hide_numbers = true,
        shade_terminals = true,
        shading_factor = 2,
        start_in_insert = false,
        insert_mappings = true,
        persist_size = true,
        direction = "float", -- Default direction for terminals
      },
      keys = {
        { "<C-\\>", mode = { "i", "t", "n" }, "<cmd>ToggleTerm<CR>", desc = "Toggle terminal" },
        {
          "<C-\\>",
          mode = "n",
          function()
            vim.cmd("ToggleTerm " .. vim.v.count1)
          end,
          desc = "Toggle terminal <count> with <count><C-\\>",
          expr = false,
        },
      },
      cmd = "ToggleTerm",
    })

4. Provided commands                                *togglepy-commands*
   - `:TogglePyDebug`: Start or stop Python debugging.
   - `:TogglePyRepl`: Open or close the Python REPL.

4. How it works?
   
   When you open a Python file, and use the command `:ToggleIPythonTerm`, a special toggleterm terminal is created
   that starts ipython by default.
   This one will be remembered by togglepy.nvim, until you close its buffer, and used for all REPL interactions.
   Most often, it might be the only toggleterm terminal you use, in which case you can hide/unhide to it with `<C-\>`.
   Single lines or selections can be send to the terminal with <F9>.
   Your file can be executed with <F5>, which which also create a terminal if it does not exist yet.

   TODO: check the switcher
   By default the terminal with start in the Python environment available at the prompt where Neovim is started.
   You can also switch to another virtual environment with <leader>tv, which uses telescope.nvim.
   For this to work, the terminal needs to restart.

   It is recommended to use the ipython REPL with the `autoreload` extension enabled. This will basically ensure that,
   in most cases, modules are reloaded when you make changes to them before execution. You can automate this by
   creating a file `~/.ipython/profile_default/startup/mystartup.py` with the following content:

   ```python
   # ~/.ipython/profile_default/startup/mystartup.py
   get_ipython().run_line_magic("load_ext", "autoreload")
   get_ipython().run_line_magic("autoreload", "2")
   ```

   There are some cases where autoreload does not work, e.g., so unfortunately, 
   sometimes, you still have to restart the REPL. Togglepy.nvim does intend to solve this, as this
   is just the way the ipython terminal seems to work.

   To get seemless debugging integration, we use the ipdab Python package, which is a small wrapper around
   the standard ipdb/pdb debugger. Basically, use `import ipdab; ipdab.set_trace()` instead of 
   `import pdb; pdb.set_trace()`. What now happens in the background is that a TCP server is started
   that provides the Debug Adapter Protocol (DAP) interface. This is then used by nvim-dap.nvim
   to connect to the debugging session. Unfortunately, pdb/ipdb are blocking once you hit a breakpoint, 
   i.e., control is given to the user in the REPL, the debugging session cannot be fully controlled by nvim-dap.nvim.
   The way out with Neovim is to create keymaps <F5>, <F10>, <F11> to that send `continue`, `next`, and `step` commands
   to the REPL. This only works because Neovim controls the teminal, and can send commands to it.
   When running you Python program in a separate terminal, outside of Neovim, you can still
   connect the debugger to it, but because Neovim does not control the terminal, you cannot
   send commands to it and control the debugging session from within Neovim.










    

